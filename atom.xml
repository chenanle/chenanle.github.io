<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吃不胖的小伙咂</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-06T05:07:59.883Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux 命令</title>
    <link href="http://yoursite.com/2019/05/06/linux-%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/05/06/linux-命令/</id>
    <published>2019-05-06T05:07:31.600Z</published>
    <updated>2019-05-06T05:07:59.883Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、linux压缩包操作"><a href="#一、linux压缩包操作" class="headerlink" title="一、linux压缩包操作"></a>一、linux压缩包操作</h3><h4 id="1-解压"><a href="#1-解压" class="headerlink" title="1. 解压"></a>1. 解压</h4><pre><code>tar -xvf XX.tar // 解压tartar -xzvf XX.tar.gz // 解压tar.gztar -xjvf XX.tar.bz2 // 解压tar.bz2tar -xZvf XX.tar.Z // 解压tar.Zunrar e XX.rar // 解压rarunzip XX.zip // 解压zip</code></pre><h4 id="2-压缩"><a href="#2-压缩" class="headerlink" title="2. 压缩"></a>2. 压缩</h4><pre><code>tar -cvf XX.tar *.jpg // 将目录中所有的jpg打包成XX.tartar -czf XX.tar.gz *.jpg // 将目录中所有的jpg先打包成XX.tar再打包成tar.gztar -cjf XX.tar.bz2 *。jpg // 打包成tar.bz2tar -cZf XX.tar.Z *.jpg // 打包成tar.z  rar a XX.rar *.jpg // rar格式，需要下载rar for linuxzip XX.zip *.jpg // zip格式，需要下载zip for linux</code></pre><h4 id="3、-压缩-解压参数详解"><a href="#3、-压缩-解压参数详解" class="headerlink" title="3、 压缩/解压参数详解"></a>3、 压缩/解压参数详解</h4><pre><code>tar    -c：建立压缩档案    -x：解压    -t：查看内容    -r：向压缩归档文件末尾追加文件    -u：更新原压缩包中的文件这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。-z：有gzip属性的-j：有bz2属性的-Z：有compress属性的-v：显示所有过程-O：将文件解开到标准输出下面的参数-f是必须的-f：使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</code></pre><h3 id="二、linux服务器命令"><a href="#二、linux服务器命令" class="headerlink" title="二、linux服务器命令"></a>二、linux服务器命令</h3><pre><code>1. 服务器之间文件传输（在A服务器上远程获取B服务器的文件）    scp -r 用户名@[B服务器的ip地址]:B服务器文件存放路径 A服务器文件存放路径2. 获取进程的PID    ps -ef|grep 进程名（例如：java）|grep -v grep|awk '{print $2}'3. 获取文件个数    ls -l|grep "^-"|wc -l4. 获取文件目录数    ls -l|grep "^d"|wc -l5. 修改文件用户权限    chown root:root file.text6. 赋予文件相应权限(例如文件执行权限 +x)    chmod +x file7. 输出文件数据    例子：        1. 输出文件前10行数据            head -10 filename        2. 输出文件结尾10行数据            tail -10 filename8. 指定文件显示范围    cut -b column file    例如：输出每行第五个到第九个字符        cut -b5-9 filename9. 在文件中搜索字符串    grep "pattern" file10. linux权限设置中数字表示    r代表读(read)，w代表写(write)，x代表执行(execute)        读：权限是二进制的100，十进制是4；        写：权限是二进制的010，十进制是2；        执行：权限是二进制的001，十进制是1；    如果具备多个权限，就吧相应的4,2,1，相加：        若要rwx 则4+2+1=7        若要rw- 则4+2=6        若要r-x 则4+1=5        若要r-- 则=4        若要-wx 则2+1=3        若要-w- 则=2        若要--x 则=1        若要--- 则=0    linux下权限设置一共十个字符，分为四段，例如：        第一个字符"-"代表普通文件，"i"代表连接，"d"代表目录        第二三四个字符"rw-"表示当前所属用户的权限。用数值表示就是4+2=6，也就是110        第五六七个字符"rw-"表示当前组的权限。用数值表示就是4+2=6，也就是110        第八九十个字符"r--"表示其他用户权限。用数值表示为2，也就是100        所以操作此文件的权限用数值表示为66211. 复制文件或目录时，排除某个文件(排除text.text)    cp `ls | grep -v text.txt | xargs` ./text212. 根据PID查询端口号    ps -ef|grep 进程名    sudo netstat -antup|grep PID13. 获取目录下某些文件    相对路径：ls -ltr *.sh|grep -v 'run.sh'| awk -F' ' '{print $NF}'    绝对路径：ls -1 *.sh|grep -v 'run.sh'| awk -F' ' '{print i$NF}' i=`pwd`'/'(如果最外层有``，pwd的`使用\转义)14. linux上截取字符串    data="aaa,bbb"    echo ${data#*,}    echo ${data%%,*}    输出:bbb         aaa15. 服务器之间脚本调用（调用的服务器之间需要打通ssh免密登录）    ssh 用户名@IP 脚本路径</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、linux压缩包操作&quot;&gt;&lt;a href=&quot;#一、linux压缩包操作&quot; class=&quot;headerlink&quot; title=&quot;一、linux压缩包操作&quot;&gt;&lt;/a&gt;一、linux压缩包操作&lt;/h3&gt;&lt;h4 id=&quot;1-解压&quot;&gt;&lt;a href=&quot;#1-解压&quot; cla
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Linux" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/Linux/"/>
    
    
      <category term="Linux基本命令操作" scheme="http://yoursite.com/tags/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>hexo+node搭建个人博客</title>
    <link href="http://yoursite.com/2019/05/06/hexo-blog/"/>
    <id>http://yoursite.com/2019/05/06/hexo-blog/</id>
    <published>2019-05-06T05:07:31.588Z</published>
    <updated>2019-05-06T05:09:24.374Z</updated>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="https://www.jianshu.com/p/465830080ea9" target="_blank" rel="noopener">https://www.jianshu.com/p/465830080ea9</a></p><h3 id="1、-Node-js-必须"><a href="#1、-Node-js-必须" class="headerlink" title="1、 Node.js(必须)"></a>1、 Node.js(必须)</h3><pre><code>下载地址：https://nodejs.org/en/</code></pre><h3 id="2、-git-必须"><a href="#2、-git-必须" class="headerlink" title="2、 git(必须)"></a>2、 git(必须)</h3><pre><code>下载地址：https://git-scm.com/downloads</code></pre><h3 id="3、-安装hexo-在git上进行操作"><a href="#3、-安装hexo-在git上进行操作" class="headerlink" title="3、 安装hexo(在git上进行操作)"></a>3、 安装hexo(在git上进行操作)</h3><pre><code>1. 安装hexo    npm install -g hexo2. 设置博客参数(见_config.yml文件)    主题：https://tomotoes.com/blog/posts/b9fba72a/3. 初始化hexo(例如：C:/hexo目录下)    hexo init4. 在C:/hexo目录安装node_modules    npm install5. 在c:/hexo下运行启动命令    hexo server6. hexo启动成功日志    [info] Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.    [info]表明Hexo Server已经启动了，在浏览器中打开http://localhost:4000/，这时可以看到Hexo已为你生成了一篇blog。</code></pre><h3 id="4、hexo-基本操作"><a href="#4、hexo-基本操作" class="headerlink" title="4、hexo 基本操作"></a>4、hexo 基本操作</h3><pre><code>1. 创建新文章    hexo n "第一篇文章" (hexo n 全名： hexo new)2. 生成静态文件    hexo g (全名：hexo generator)3. 上传到github    hexo deploy(_config.yml文件中需要进行配置github的地址)4. 启动hexo    hexo s (全名：hexo server)</code></pre><h3 id="5、-启动hexo出现的问题总结（及解决方法）"><a href="#5、-启动hexo出现的问题总结（及解决方法）" class="headerlink" title="5、 启动hexo出现的问题总结（及解决方法）"></a>5、 启动hexo出现的问题总结（及解决方法）</h3><pre><code>1. ERROR Deployer not found: git    npm install --save hexo-deployer-git</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文地址：&lt;a href=&quot;https://www.jianshu.com/p/465830080ea9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/465830080ea9&lt;/a&gt;&lt;/p&gt;
&lt;h3 i
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="hexo" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="快速搭建个人博客" scheme="http://yoursite.com/tags/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
